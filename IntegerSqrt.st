Object subclass: #IntegerSqrt	instanceVariableNames: 'precision number granularity sqrtBase baseSquared decimals floor'	classVariableNames: ''	poolDictionaries: ''	category: 'IntegerSqrt'!!IntegerSqrt commentStamp: 'KarineCrevecoeur 12/28/2016 19:15' prior: 0!I calculate the square root of an integer to arbitraryprecision.To use [[[	2 intSqrtWithPrecison: 256.	(IntegerSqrt of: 2 withPrecison: 256) calculate.		(IntegerSqrt of: 2 withPrecison: 1024) granularity: 256; calculate. ]]]!!IntegerSqrt methodsFor: 'private' stamp: 'KarineCrevecoeur 12/26/2016 18:19'!newtonWithU:  u andV:  v	| k1 k2 |	k1 := v // u + 1.	[ k2 := (k1 * k1 +  v) //  (2 * k1 +  u). 	  k1 = k2 ]  		whileFalse:  [ k1 := k2 ].	^  k1	! !!IntegerSqrt methodsFor: 'private' stamp: 'KarineCrevecoeur 12/28/2016 19:03'!doCalculateWithU: u0 andV: v0 to: anInteger	| u v p k  s |	u := u0.	v := v0.	p := anInteger.	[  k:= self newtonWithU:  u  andV:  v.	  decimals  add: k.	  p := p - 1.	  p = 0 ] whileFalse:  [ 		s := k + u.		u := (s + k) * sqrtBase.		v := (v - (s * k)) *  baseSquared ]! !!IntegerSqrt methodsFor: 'calculating' stamp: 'KarineCrevecoeur 12/28/2016 19:04'!calculate	| ent u v  p |		ent := number sqrtFloor.	floor := ent.	decimals := OrderedCollection new.	((ent * ent = number) or: [ precision = 0 ])		ifTrue:  [  ^ self  ].	p :=  (precision \\  granularity = 0) 		ifTrue:  [  precision // granularity ]		ifFalse: [  precision // granularity + 1 ]. 			u := 2 * ent * sqrtBase.	v := (number - (ent * ent)) * baseSquared.      self  doCalculateWithU: u andV: v to: p			! !!IntegerSqrt methodsFor: 'accessing' stamp: 'KarineCrevecoeur 12/26/2016 03:58'!number	^ number! !!IntegerSqrt methodsFor: 'accessing' stamp: 'KarineCrevecoeur 12/26/2016 03:58'!number: anObject	number := anObject! !!IntegerSqrt methodsFor: 'accessing' stamp: 'KarineCrevecoeur 12/26/2016 03:59'!number: anInteger precision: aPrecision	 self number: anInteger.	self precision: aPrecision! !!IntegerSqrt methodsFor: 'accessing' stamp: 'KarineCrevecoeur 12/28/2016 19:01'!granularity	^ granularity! !!IntegerSqrt methodsFor: 'accessing' stamp: 'KarineCrevecoeur 12/26/2016 03:58'!precision: anObject	precision := anObject! !!IntegerSqrt methodsFor: 'accessing' stamp: 'KarineCrevecoeur 12/26/2016 03:58'!precision	^ precision! !!IntegerSqrt methodsFor: 'accessing' stamp: 'KarineCrevecoeur 12/28/2016 19:03'!granularity: anInteger	granularity := anInteger.	sqrtBase := 10 raisedTo: granularity.	baseSquared := sqrtBase squared	! !!IntegerSqrt methodsFor: 'printing' stamp: 'KarineCrevecoeur 9/22/2019 15:52'!printOn: aStream	super printOn: aStream.	aStream 		<<  ' (' ; 		<< 'number: ';		<<  number printString;		<<  ' precision: ';		<<  precision printString;		<<  ' granularity: ';		<< granularity printString;		<< ')' 	! !!IntegerSqrt methodsFor: 'printing' stamp: 'KarineCrevecoeur 12/28/2016 19:04'!printString	^ String streamContents: [  :aStream |		aStream << floor asString.		 (decimals isEmpty ) ifFalse: [			aStream <<  '.' .			decimals do: [  :d  |				aStream << (d printPaddedWith: $0 to: granularity)  ]  ]  ]! !!IntegerSqrt methodsFor: 'initialization' stamp: 'KarineCrevecoeur 12/28/2016 19:04'!initialize	super initialize.	precision := 1024.	number := 0.	floor := 0.	granularity  := 128.	sqrtBase := 10 raisedTo: granularity.	baseSquared := sqrtBase  squared.	decimals := OrderedCollection new.				! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegerSqrt class	instanceVariableNames: ''!!IntegerSqrt class methodsFor: 'instance creation' stamp: 'KarineCrevecoeur 12/26/2016 12:15'!of: anInteger withPrecison: aPrecison	| r |	r := self new.	r number: anInteger  precision: aPrecison.	^ r! !'From Pharo6.0 of 13 May 2016 [Latest update: #60528] on 27 July 2020 at 11:39:55.047813 am'!!Number methodsFor: '*IntegerSqrt' stamp: 'KarineCrevecoeur 12/28/2016 18:58'!intSqrtWithPrecison:  anInteger	| r |	r :=  IntegerSqrt of:  self withPrecison:  anInteger.	^ r calculate.! !